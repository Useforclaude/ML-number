═══════════════════════════════════════════════════════════════════
🚀 PAPERSPACE QUICK START - ML Phone Number Training
═══════════════════════════════════════════════════════════════════

📋 คู่มือฉบับเต็ม: PAPERSPACE_MODULAR_TRAINING_GUIDE.md

═══════════════════════════════════════════════════════════════════
STEP 1: สร้าง Paperspace Notebook
═══════════════════════════════════════════════════════════════════

1. ไปที่: https://www.paperspace.com/
2. Gradient → Notebooks → Create
3. Template: PyTorch
4. GPU: Free-GPU (M4000) หรือ RTX A4000 (Growth Plan)
5. Start Notebook → เปิด Terminal

═══════════════════════════════════════════════════════════════════
STEP 2: Setup (Copy-Paste ทั้งหมด!)
═══════════════════════════════════════════════════════════════════

# Clone โปรเจกต์
cd /storage
git clone https://github.com/Useforclaude/ML-number.git
cd ML-number

# สร้าง virtual environment
python3 -m venv .venv
source .venv/bin/activate

# ติดตั้ง packages (รอ 5-10 นาที)
pip install -r requirements.txt

# สร้างโฟลเดอร์ logs
mkdir -p logs

# เช็ค GPU
nvidia-smi

# ควรเห็น: Quadro M4000 (Free) หรือ RTX A4000 (Growth)

═══════════════════════════════════════════════════════════════════
STEP 3: เทรนแบบทีละโมเดล (แนะนำ!)
═══════════════════════════════════════════════════════════════════

# 1. XGBoost (2-4 ชม.)
nohup python train_xgboost_only.py > logs/xgb.log 2>&1 &
tail -f logs/xgb.log
# กด Ctrl+C เพื่อหยุด monitor (โมเดลยังรันต่อ!)

# รอจนเสร็จ (เช็คด้วย: ls models/checkpoints/xgboost_checkpoint.pkl)

# 2. LightGBM (3-5 ชม.)
nohup python train_lightgbm_only.py > logs/lgb.log 2>&1 &
tail -f logs/lgb.log

# รอจนเสร็จ (เช็คด้วย: ls models/checkpoints/lightgbm_checkpoint.pkl)

# 3. CatBoost (1-3 ชม.)
nohup python train_catboost_only.py > logs/cat.log 2>&1 &
tail -f logs/cat.log

# รอจนเสร็จ (เช็คด้วย: ls models/checkpoints/catboost_checkpoint.pkl)

# 4. RandomForest (1-2 ชม.)
nohup python train_rf_only.py > logs/rf.log 2>&1 &
tail -f logs/rf.log

# รอจนเสร็จ (เช็คด้วย: ls models/checkpoints/random_forest_checkpoint.pkl)

# 5. Ensemble (15-30 นาที) - รันหลังครบทั้ง 4 โมเดล!
python train_ensemble_only.py

═══════════════════════════════════════════════════════════════════
STEP 4: Monitor Progress
═══════════════════════════════════════════════════════════════════

# เช็ค GPU (real-time)
watch -n 2 nvidia-smi
# กด Ctrl+C เพื่อหยุด

# เช็ค log
tail -f logs/xgb.log

# เช็คว่าโมเดลไหนกำลังรัน
ps aux | grep train_

# เช็ค checkpoints ที่เสร็จแล้ว
ls -lh models/checkpoints/

═══════════════════════════════════════════════════════════════════
⏱️  Expected Training Time
═══════════════════════════════════════════════════════════════════

M4000 (Free):        11-14 hours total
A4000 (Growth):      8-11 hours total

Expected R² Score:   0.90-0.93 ✅

═══════════════════════════════════════════════════════════════════
🔧 Troubleshooting
═══════════════════════════════════════════════════════════════════

Process หยุด (Killed):
  → รันทีละโมเดล (อย่ารันพร้อมกัน)

GPU ไม่ทำงาน (0%):
  → grep -i "gpu" logs/xgb.log
  → pip install --upgrade xgboost

ไม่พบไฟล์:
  → cd /storage/ML-number
  → ls train_*.py

Module not found:
  → source .venv/bin/activate
  → pip install -r requirements.txt

Browser ปิดแล้ว:
  → ✅ ไม่เป็นไร! ใช้ nohup แล้ว โมเดลยังรันต่อ
  → เช็คด้วย: ps aux | grep train_

═══════════════════════════════════════════════════════════════════
✅ Done!
═══════════════════════════════════════════════════════════════════

ดาวน์โหลด model:
  File Browser → /storage/ML-number/models/deployed/best_model.pkl
  → คลิกขวา → Download

═══════════════════════════════════════════════════════════════════
